#!/usr/bin/env node

'use strict';

/**
 * Script to output a schema from one or more values.
 *
 * The input should be in JSON-lines format (one JSON entry per line).
 *
 * Usage:
 *
 *  infer [JSON]
 *
 */

var avro = require('../../lib'),
    readline = require('readline'),
    util = require('util');


var argv = process.argv;
switch (argv.length) {
  case 2:
    fromStream();
    return;
  case 3:
    show(avro.infer(JSON.parse(argv[2])));
    return;
  default:
    console.error(util.format('usage: %s [JSON]', argv[1]));
    process.exit(1);
}

/**
 * Infer a type from a stream of values.
 *
 */
function fromStream() {
  var type = null;
  readline.createInterface({input: process.stdin, terminal: false})
    .on('line', function (str) {
      var val = JSON.parse(str);
      if (type === null) {
        type = avro.infer(val);
      } else if (!type.isValid(val)) {
        type = avro.combine([type, avro.infer(val)]);
      }
    })
    .on('close', function () {
      if (type) {
        show(type);
      }
    });
}

/**
 * Output a type's schema, including defaults.
 *
 */
function show(type) { console.log(type.getSchema({exportAttrs: true})); }
